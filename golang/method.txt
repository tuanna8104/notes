METHOD:  
a function with Special receiver argument,  whose type is defined in the same package as the method.
func (v Vertex) Abs() float64 {
	return math.Sqrt(v.X*v.X + v.Y*v.Y)
}

func main() {
	v := Vertex{3, 4}
	fmt.Println(v.Abs())
}

func (v *Vertex) Scale(f float64) {
	v.X = v.X * f
	v.Y = v.Y * f
}

In general, all methods on a given type should have either value or pointer receivers, but not a mixture of both. 

INTERFACES: Interfaces are implemented implicitly, (value, type)
type MyFloat float64

type Abser interface {
  Abs() float64
}

func main() {
	var a Abser
	f := MyFloat(-math.Sqrt2)
	v := Vertex{3, 4}

	a = f  // a MyFloat implements Abser ({-math.Sqrt2}, main.MyFloat)
	a = &v // a *Vertex implements Abser (&{3.4}, *main.Vertex)

	fmt.Println(a.Abs())
}

func (f MyFloat) Abs() float64 {
  if f < 0 {
    return float64(-f)
  }
  return float64(f)
}

type Vertex struct {
  X, Y float64
}

func (v *Vertex) Abs() float64 {
  return math.Sqrt(v.X*v.X + v.Y*v.Y)
}

func (t *T) M() {
  if t == nil {
    fmt.Println("<nil>")
    return
  } 
  fmt.Println(t.S)
}

var i interface{} Empty inteface hold values of any type

TYPE ASSERTIONS
func main() {
  var i interface{} = "hello"
  
  s := i.(string)
  fmt.Println(s)
  
  f, ok := i.(float64)
  fmt.Println(f, ok)
}

ERROR:
i, err := strconv.Atoi("42")
if err != nil {
    fmt.Printf("couldn't convert number: %v\n", err)
    return
}
fmt.Println("Converted integer:", i)

func (T) Read(b []byte) (n int, err error)
type rot13Reader struct {
   r io.Reader
}

type Image interface {
    ColorModel() color.Model
    Bounds() Rectangle
    At(x, y int) color.Color
}

Goroutines
go f(x,y,z)

Channels
ch <- v
v := <-ch
ch := make(chan int)
func sum(s []int, c chan int) {
	sum := 0
	for _, v := range s {
		sum += v
	}
	c <- sum // send sum to c
}

func main() {
	s := []int{7, 2, 8, -9, 4, 0}

	c := make(chan int)
	go sum(s[:len(s)/2], c)
	go sum(s[len(s)/2:], c)
	x, y := <-c, <-c // receive from c

	fmt.Println(x, y, x+y)
}

ch := make(chan int, 100)
v, ok := <-ch

func fibonacci(n int, c chan int) {
	x, y := 0, 1
	for i := 0; i < n; i++ {
		c <- x
		x, y = y, x+y
	}
	close(c)
}

func main() {
	c := make(chan int, 10)
	go fibonacci(cap(c), c)
	for i := range c {
		fmt.Println(i)
	}
}

Note: Only the sender should close a channel, never the receiver. Sending on a closed channel will cause a panic.

Another note: Channels aren't like files; you don't usually need to close them. Closing is only necessary when the receiver must be told there are no more values coming, such as to terminate a range loop.

A select blocks until one of its cases can run, then it executes that case. It chooses one at random if multiple are ready.
func fibonacci(c, quit chan int) {
	x, y := 0, 1
	for {
		select {
		case c <- x:
			x, y = y, x+y
		case <-quit:
			fmt.Println("quit")
			return
		}
	}
}

sync.Mutex (Lock, Unlock)
