Local move from this configuration to that configuration
Constrast with constraint programming

* Satisfaction Problems:
- Use Max/Min - Conflict: 
+ choose a decision variable that appear in the most violations
+ assign to a value that minimize its violations

* Swap:
- Maintain hard constraints, try soft constraints
- Need good model about voliation to provide insight information

Many ways to choose neighbours
Examples:
- Warehouse location: Open and close, swap
- Travelling salesman: 2-OPT, 3-OPT, 4-OPT, .... more => more better but more expansives,
  K-OPT (sequence of swaps)

* Graph coloring:
Method 1: Sequence of feasibility problems:
+ find an initial solution with k colors
+ remove one colore
+ find a feasible solution with k - 1 colors => try to minimize number of violations in each steps
+ repeat

Method 2: Staying in the space of solutions:
+ Color classes: C(i)
+ Drive the search: favor large color classes, objective function: max(sum(C(i)*C(i)))
+ Route the neighbour: Kemp Chains

Method 3: Exploring both feasible and infeasible colorings:
+ make sure local optima are feasible
+ neighbourhood: change color of a vertex
MAX(sum(C(i)*C(i)))
+ bad edges: two vertice same color, B(i): set of bad egde between two vertices with color i
MIN(sum(B(i)))
+ use an objective function to balance feasibility and optimality
MIN(SUM(2*B(i)*C(i)) - SUM(C(i)^2)) 

* Sport Scheduling (TTP)
Swap Homes, Swap Rounds, Swap Teams, Swap Parital Rounds, Swap Partial Teams 

* Escaping local minima: connectivity, 
* Heuristics: next nieghbour, local information, towards a local minimum
* Metaheuristics: escaping local minima, towards a global minimum, inculde some memory or learning
